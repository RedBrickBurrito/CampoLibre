datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  name              String
  phone             String?
  company           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  role              Role     @default(USER)
  
  accounts          Account[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


enum Role {
  USER
  ADMIN
}

model Product {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  price             Float      
  image             String
  imageAlt          String
  currency          String    @default("MXN")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  product_type      String    @default("fruit")
  product_data      ProductData[]
  price_data        PriceData[]
}

model ProductData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  metadata  Json
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model PriceData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  recurring Json
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  customerId    String
  customerName  String
  status        Status     @default(Pendiente)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order_details String[] 
}

enum Status {
  Pendiente
  Empaquetada
  Enviado
  Completada
  Cancelada
  Reembolsado
  Disputada
}
